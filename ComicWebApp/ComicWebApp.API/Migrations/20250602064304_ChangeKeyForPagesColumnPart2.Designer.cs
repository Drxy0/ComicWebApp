// <auto-generated />
using System;
using ComicWebApp.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComicWebApp.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250602064304_ChangeKeyForPagesColumnPart2")]
    partial class ChangeKeyForPagesColumnPart2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<float>("Number")
                        .HasColumnType("real");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("ComicChapters");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ComicPages");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesAppStats", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<float>("DropRate")
                        .HasColumnType("real");

                    b.Property<int>("NumberOfReaders")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ComicSeriesAppStats");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Artist")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Colorist")
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("Genres")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Inker")
                        .HasColumnType("text");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("text");

                    b.Property<string>("Penciler")
                        .HasColumnType("text");

                    b.Property<int>("PublicationStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("Themes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Writer")
                        .HasColumnType("text");

                    b.Property<int?>("YearOfRelease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ComicSeriesMetadata");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ComicSeries");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.ComicListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComicSeriesId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComicSeriesId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ComicListEntry");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GeneralOpinion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicChapter", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", "Series")
                        .WithMany("Chapters")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicPage", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicChapter", "Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesAppStats", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", "ComicSeries")
                        .WithOne("Stats")
                        .HasForeignKey("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesAppStats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicSeries");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesMetadata", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", "ComicSeries")
                        .WithOne("Metadata")
                        .HasForeignKey("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesMetadata", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicSeries");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.ComicListEntry", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", "ComicSeries")
                        .WithMany()
                        .HasForeignKey("ComicSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicWebApp.API.Features.Users.UserModels.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicWebApp.API.Features.Users.UserModels.User", "User")
                        .WithMany("ComicsList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComicSeries");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.RefreshToken", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.Users.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.User", b =>
                {
                    b.HasOne("ComicWebApp.API.Features.Users.UserModels.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicChapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("ComicWebApp.API.Features.ComicSeries.ComicSeriesModels.ComicSeriesModel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("ComicWebApp.API.Features.Users.UserModels.User", b =>
                {
                    b.Navigation("ComicsList");

                    b.Navigation("Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
